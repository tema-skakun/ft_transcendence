/// <reference types="node" />
import { Socket } from 'socket.io';
import { GameState } from 'src/interfaces/GameState';
import { Key } from 'src/constants/constants';
import { UserService } from 'src/modules/user/user.service';
import { MatchHistoryService } from 'src/modules/game/match-history/match-history.service';
import { ArchivementsService } from 'src/modules/archivements/archivements.service';
type EventFunction = (...args: any[]) => void;
type EventFunctionXClient = (player: Client) => EventFunction;
export declare class Client extends Socket {
    private _inGame;
    get inGame(): boolean;
    set inGame(val: boolean);
    private set inGameUncoupled(value);
    streak: number;
    private userService;
    private matchHistoryService;
    private archivmentService;
    private _playernum;
    get playernum(): number;
    set playernum(val: number);
    set playernumUncoupled(val: number);
    key: Key;
    private _involvedGame;
    set involvedGame(ig: string);
    get involvedGame(): string;
    private _otherPlayerObj;
    set otherPlayerObj(op: Client);
    get otherPlayerObj(): Client;
    private _otherPlayer;
    get otherPlayer(): string;
    private listnersToBeCleaned;
    cleanUp(): void;
    private _gameState;
    set gameState(gs: GameState);
    get gameState(): GameState;
    private _gameLoop;
    set gameLoop(gl: NodeJS.Timer);
    get gameLoop(): NodeJS.Timer | undefined;
    private _cookie;
    private _intraId;
    set cookie(aCookie: Record<string, any>);
    get cookie(): Record<string, any>;
    private _pendingMatchRequest;
    setPendingMatchRequest(uuid: string): Promise<void>;
    set pendingMatchRequestUncoupled(uuid: string);
    get pendingMatchRequest(): string;
    private _goals;
    zero_goals(): void;
    incr_goals(): void;
    get goals(): number;
    coupledOn(clientEventName: string, eventFunctionXClient: EventFunctionXClient): void;
    onSave(eventName: string, eventFunction: EventFunction): void;
    coupledEmits(eventName: string, data: string): void;
    cancelGame(): void;
    tearDown(): void;
    constructor(socket: Socket, userService: UserService, matchHistoryService: MatchHistoryService, archivementService: ArchivementsService);
    _digestCookie(cookieStr: string, decrypthMethod: any, decryptObj: any): void;
    get intraId(): number;
}
export declare function isClient(obj: any): obj is Client;
export {};
